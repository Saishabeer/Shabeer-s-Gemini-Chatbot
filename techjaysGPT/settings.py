"""
Django settings for techjaysGPT project.

Generated by 'django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path
import dj_database_url
from dotenv import load_dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Load environment variables from .env file
load_dotenv(BASE_DIR / '.env')

# --- Core Settings ---

# SECURITY WARNING: don't run with debug turned on in production!
# This MUST be defined before other settings that depend on it.
DEBUG = os.getenv('DEBUG', 'False') == 'True'

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY')
if not SECRET_KEY:
    if DEBUG:
        print("WARNING: SECRET_KEY not found in .env. Using a temporary, insecure key for development.")
        SECRET_KEY = 'temporary-insecure-key-for-development'
    else:
        raise ValueError("SECRET_KEY environment variable must be set in production (when DEBUG=False).")

# In production, set this in .env as a comma-separated string: e.g., 'yourdomain.com,www.yourdomain.com'
ALLOWED_HOSTS = []
raw_hosts = os.getenv('ALLOWED_HOSTS')
if raw_hosts:
    ALLOWED_HOSTS.extend([host.strip() for host in raw_hosts.split(',')])
if DEBUG:
    ALLOWED_HOSTS.extend(['127.0.0.1', 'localhost'])

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # Your applications
    'GPT',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'techjaysGPT.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        # Tell Django to look for templates in a 'templates' directory
        # at the project's root level (BASE_DIR).
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'techjaysGPT.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Using dj-database-url to parse a single DATABASE_URL from the environment.
# This is a standard practice for modern Django applications and simplifies deployment.
DATABASES = {
    'default': dj_database_url.config(
        # Fallback to a local SQLite DB if DATABASE_URL is not set.
        default=f"sqlite:///{BASE_DIR / 'db.sqlite3'}",
        conn_max_age=600  # Keep connections alive for 10 minutes
    )
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Add a directory for your project-wide static files.
STATICFILES_DIRS = [
    BASE_DIR / "static",
]

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Redirect users to the 'home' view after a successful login.
LOGIN_REDIRECT_URL = 'home'
# If a user is not logged in, redirect them to the 'login' view.
LOGIN_URL = 'login'
# After logging out, redirect users back to the login page.
LOGOUT_REDIRECT_URL = 'login'


# Media (for uploaded docs)
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Chroma persistent directory (per-session subfolders will be created)
CHROMA_DIR = BASE_DIR / 'chroma'

# Logging Configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '[%(asctime)s] %(levelname)s [%(name)s:%(lineno)s] %(message)s',
            'datefmt': '%d/%b/%Y %H:%M:%S'
        },
    },
    'handlers': {
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'verbose'
        },
    },
    'loggers': {
        'GPT': {
            'handlers': ['console'],
            'level': 'INFO',
        },
    }
}
